#это конфигурационный файл для GitLab CI/CD, который описывает, какие задачи необходимо выполнить в рамках процесса CI/CD
#и в каком порядке. Когда вы создаете и настраиваете CI/CD пайплайн в GitLab, GitLab использует файл .gitlab-ci.yml для
#автоматической сборки, тестирования и развертывания вашего проекта. Этот файл определяет различные этапы процесса CI/CD,
#а также задачи, которые должны быть выполнены в каждом этапе. Кроме того, файл .gitlab-ci.yml позволяет настроить
#переменные окружения, установить права доступа, определить условия выполнения задач и многое другое.

#определяем список задач которые будут запускаться в CI/CD-процессе
stages:
  - test #также это может быть -build или -deploy

#определяем job - задачи, которые должны выполняться на каждом этапе (stages)
test:
  stage: test
  image: python:3.11 #здесь указываем имя Docker-образа, используемого для выполнения задачи.
  before_script: #задаем набор команд, которые будут выполнены перед запуском каждой задачи (job) в конкретном stage (этапе).
    - pip install tox
  script: #команды, которые необходимо выполнить в рамках задачи
    - tox

# Этот файл определяет одну стадию test, которая запускает тестирование с помощью tox.
# В этом примере мы используем образ python:3.11 для запуска тестов, устанавливаем tox в before_script,
# и затем запускаем команду tox в script


#----------------------ВАРИАНТ ВТОРОЙ-------------------------------
image: docker:latest #задает образ, который будет использоваться для выполнения задач в GitLab CI/CD. В данном случае, используется официальный Docker-образ.

services: #указывает, какие сервисы должны быть запущены для выполнения задач в GitLab CI/CD. В данном случае, используется сервис docker:dind, который запускает Docker в Docker (DinD).
  - docker:dind

variables: #определяет переменные, используемые в GitLab CI/CD. В данном случае, определяются переменные для работы с Docker и Docker Compose.
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

before_script: #задает команды, которые должны быть выполнены перед запуском задач в GitLab CI/CD. В данном случае, выполняются команды для установки Docker Compose, сборки Docker-образов и авторизации в Docker-реестре.
  - apk add --no-cache docker-compose
  - docker-compose build
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages: #определяет список этапов, на которые разбивается процесс CI/CD. В данном случае, определены два этапа: build и test.
  - build
  - test

build: #задает задачу для этапа build. В данном случае, выполняется команда docker-compose push, которая отправляет собранные Docker-образы в Docker-реестр. Задача запускается только при изменении в ветке master.
  stage: build
  script:
    - docker-compose push
  only:
    - master

test: #задает задачу для этапа test. В данном случае, выполняется команда docker-compose run blue_django tox, которая запускает тесты проекта внутри Docker-контейнера. Задача запускается только при создании merge request'а.
  stage: test
  script:
    - docker-compose run blue_django tox
  only:
    - merge_requests